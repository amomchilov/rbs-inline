use Prism::*

module RBS
  module Inline
    class Parser < Prism::Visitor
      # A mappning from the last line to the result
      #
      # Comments associated to some elements are deleted while parsing.
      #
      attr_reader comments: Hash[Integer, AnnotationParser::ParsingResult]

      attr_reader decls: Array[AST::Declarations::t]

      attr_reader surrounding_decls: Array[AST::Declarations::ClassDecl]

      def initialize: () -> void

      def self.parse: (ParseResult[ProgramNode]) -> [Array[AST::Annotations::Use], Array[AST::Declarations::t]]

      def current_class_module_decl: () -> AST::Declarations::ClassDecl?

      def current_class_module_decl!: () -> AST::Declarations::ClassDecl

      def push_class_module_decl: (AST::Declarations::ClassDecl) { () -> void } -> void

      def ignored_node?: (Prism::Node) -> bool

      def visit_class_node: (ClassNode node) -> void

      def application_annotation: (Prism::Node node) -> AST::Annotations::Application?
    end
  end
end
