use Prism::*

module RBS
  module Inline
    class Parser < Prism::Visitor
      # A mappning from the last line to the result
      #
      # Comments associated to some elements are deleted while parsing.
      #
      attr_reader comments: Hash[Integer, AnnotationParser::ParsingResult]

      attr_reader decls: Array[AST::Declarations::t]

      attr_reader surrounding_decls: Array[AST::Declarations::ModuleDecl | AST::Declarations::ClassDecl]

      attr_reader current_visibility: RBS::AST::Members::visibility?

      def initialize: () -> void

      def self.parse: (ParseResult[ProgramNode]) -> [Array[AST::Annotations::Use], Array[AST::Declarations::t]]?

      def current_class_module_decl: () -> (AST::Declarations::ModuleDecl | AST::Declarations::ClassDecl | nil)

      def current_class_module_decl!: () -> (AST::Declarations::ModuleDecl | AST::Declarations::ClassDecl)

      def push_class_module_decl: (AST::Declarations::ModuleDecl | AST::Declarations::ClassDecl) { () -> void } -> void
                                | (AST::Declarations::ConstantDecl) -> void

      def ignored_node?: (Node) -> bool

      def visit_class_node: (ClassNode node) -> void

      def application_annotation: (Node node) -> AST::Annotations::Application?

      def assertion_annotation: (Node | Prism::Location) -> AST::Annotations::Assertion?

      def push_visibility: (RBS::AST::Members::visibility | nil) { () -> void } -> void
    end
  end
end
