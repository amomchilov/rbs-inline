use RBS::AST::Members::MethodDefinition::Overload

module RBS
  module Inline
    module AST
      module Members
        type ruby = RubyDef | RubyAlias | RubyMixin | RubyAttr | RubyPublic | RubyPrivate

        type rbs = RBSDef | RBSAlias | RBSAttr

        type t = ruby | rbs

        class Base
        end

        class RubyDef < Base
          attr_reader node: Prism::DefNode

          attr_reader comments: AnnotationParser::ParsingResult?

          attr_reader visibility: RBS::AST::Members::visibility?

          def initialize: (Prism::DefNode, AnnotationParser::ParsingResult?, RBS::AST::Members::visibility) -> void

          def method_name: () -> Symbol

          def method_overloads: () -> Array[Overload]

          def method_type_annotations: () -> Array[Annotations::Assertion]

          def return_type: () -> Types::t?

          def method_kind: () -> RBS::AST::Members::MethodDefinition::kind

          def var_type_hash: () -> Hash[Symbol, Types::t?]

          def method_annotations: () -> Array[RBS::AST::Annotation]
        end

        class RubyAlias < Base
          attr_reader node: Prism::AliasMethodNode

          attr_reader comments: AnnotationParser::ParsingResult?

          def initialize: (Prism::AliasMethodNode, AnnotationParser::ParsingResult?) -> void

          def old_name: () -> Symbol

          def new_name: () -> Symbol
        end

        class RubyMixin < Base
          attr_reader node: Prism::CallNode

          attr_reader comments: AnnotationParser::ParsingResult?

          attr_reader application: Annotations::Application?

          def initialize: (Prism::CallNode, AnnotationParser::ParsingResult?, Annotations::Application?) -> void

          def rbs: () -> (::RBS::AST::Members::Include | ::RBS::AST::Members::Extend | ::RBS::AST::Members::Prepend | nil)

          def mixin_member: () -> TypeName

          def mixin_arguments: () -> Array[Types::t]
        end

        class RubyAttr < Base
          attr_reader node: Prism::CallNode

          attr_reader comments: AnnotationParser::ParsingResult?

          attr_reader assertion: Annotations::Assertion?

          def initialize: (Prism::CallNode, AnnotationParser::ParsingResult?, Annotations::Assertion?) -> void

          def rbs: () -> Array[RBS::AST::Members::AttrReader | RBS::AST::Members::AttrWriter | RBS::AST::Members::AttrAccessor]?

          def attribute_type: () -> Types::t
        end

        class RubyPrivate < Base
          attr_reader node: Prism::CallNode

          def initialize: (Prism::CallNode) -> void
        end

        class RubyPublic < Base
          attr_reader node: Prism::CallNode

          def initialize: (Prism::CallNode) -> void
        end

        class RBSDef < Base
        end

        class RBSAlias < Base
        end

        class RBSAttr < Base
        end
      end
    end
  end
end
