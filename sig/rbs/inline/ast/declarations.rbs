module RBS
  module Inline
    module AST
      module Declarations
        type t = ClassDecl | ModuleDecl | ConstantDecl

        module ConstantUtil
          def type_name: (Prism::Node) -> TypeName?
        end

        class Base
        end

        module Generics : _WithComments
          interface _WithComments
            def comments: () -> AnnotationParser::ParsingResult?
          end

          def type_params: () -> Array[RBS::AST::TypeParam]
        end

        class ClassDecl < Base
          include ConstantUtil

          include Generics

          attr_reader node: Prism::ClassNode

          attr_reader members: Array[Members::t | t]

          attr_reader comments: AnnotationParser::ParsingResult?

          attr_reader super_application: Annotations::Application?

          def initialize: (Prism::ClassNode, AnnotationParser::ParsingResult?, Annotations::Application?) -> void

          %a{pure} def class_name: () -> TypeName?

          %a{pure} def super_class: () -> RBS::AST::Declarations::Class::Super?
        end

        class ModuleDecl < Base
          include ConstantUtil

          include Generics

          attr_reader node: Prism::ModuleNode

          attr_reader members: Array[Members::t | t]

          attr_reader comments: AnnotationParser::ParsingResult?

          attr_reader inner_comments: Array[AnnotationParser::ParsingResult]

          def initialize: (Prism::ModuleNode, AnnotationParser::ParsingResult?) -> void

          %a{pure} def module_name: () -> TypeName?

          %a{pure} def module_selfs: () -> Array[Annotations::ModuleSelf]
        end

        class ConstantDecl < Base
          include ConstantUtil

          attr_reader node: Prism::ConstantWriteNode

          attr_reader comments: AnnotationParser::ParsingResult?

          attr_reader assertion: Annotations::Assertion?

          def initialize: (Prism::ConstantWriteNode, AnnotationParser::ParsingResult?, Annotations::Assertion?) -> void

          %a{pure} def type: () -> Types::t

          %a{pure} def literal_type: () -> Types::t?

          %a{pure} def constant_name: () -> TypeName?
        end
      end
    end
  end
end
