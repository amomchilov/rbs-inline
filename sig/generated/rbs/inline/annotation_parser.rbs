module RBS
  module Inline
    class AnnotationParser
      class ParsingResult
        attr_reader comments: Array[Prism::Comment]

        attr_reader annotations: Array[AST::Annotations::t]

        attr_reader first_comment_offset: Integer

        # @rbs first_comment: Prism::Comment
        def initialize: (Prism::Comment first_comment) -> untyped

        # @rbs return: Range[Integer]
        def line_range: () -> Range[Integer]

        # @rbs return: Prism::Comment
        def last_comment: () -> Prism::Comment

        # @rbs comment: Prism::Comment
        # @rbs return: self?
        def add_comment: (Prism::Comment comment) -> self?

        # @rbs return: Array[[String, Prism::Comment]]
        def lines: () -> Array[[ String, Prism::Comment ]]

        # @rbs return: String
        def content: () -> String
      end

      attr_reader input: Array[Prism::Comment]

      # @rbs input: Array[Prism::Comment]
      def initialize: (Array[Prism::Comment] input) -> untyped

      # @rbs input: Array[Prism::Comment]
      # @rbs return: Array[ParsingResult]
      def self.parse: (Array[Prism::Comment] input) -> Array[ParsingResult]

      # @rbs return: Array[ParsingResult]
      def parse: () -> Array[ParsingResult]

      private

      # @rbs result: ParsingResult
      # @rbs block: ^(Array[Prism::Comment]) -> void
      # @rbs return: void
      def each_annotation_paragraph: (ParsingResult result) { (Array[Prism::Comment]) -> void } -> void

      class Tokenizer
        attr_reader scanner: StringScanner

        attr_reader current_token: token?

        # @rbs scanner: StringScanner
        # @rbs return: void
        def initialize: (StringScanner scanner) -> void

        # @rbs tree: AST::Tree
        # @rbs return: token?
        def advance: (AST::Tree tree) -> token?

        # Test if current token has specified `type`
        #
        # @rbs type: Symbol
        # @rbs return: bool
        def type?: (Symbol type) -> bool

        # Reset the current_token to incoming comment `--`
        #
        # Reset to the end of the input if `--` token cannot be found.
        #
        # @rbs return: String -- String that is skipped
        def skip_to_comment: () -> String
      end

      # @rbs comments: AST::CommentLines
      # @rbs return: AST::Annotations::t?
      def parse_annotation: (AST::CommentLines comments) -> AST::Annotations::t?

      # @rbs tokenizer: Tokenizer
      # @rbs return: AST::Tree
      def parse_var_decl: (Tokenizer tokenizer) -> AST::Tree

      # @rbs tokenizer: Tokenizer
      # @rbs return: AST::Tree
      def parse_return_type_decl: (Tokenizer tokenizer) -> AST::Tree

      # @rbs tokenizer: Tokenizer
      # @rbs return: AST::Tree
      def parse_comment: (Tokenizer tokenizer) -> AST::Tree

      # @rbs tokenizer: Tokenizer
      # @rbs return: AST::Tree
      def parse_type_app: (Tokenizer tokenizer) -> AST::Tree

      # Parse a RBS method type or type and returns it
      #
      # It tries parsing a method type, and then parsing a type if failed.
      #
      # If both parsing failed, it returns a Tree(`:type_syntax_error), consuming all of the remaining input.
      #
      # Note that this doesn't recognize `--` comment unlike `parse_type`.
      #
      # @rbs tokenizer: Tokenizer
      # @rbs parent_tree: AST::Tree
      # @rbs return: MethodType | AST::Tree | Types::t | nil
      def parse_type_method_type: (Tokenizer tokenizer, AST::Tree parent_tree) -> (MethodType | AST::Tree | Types::t | nil)

      # Parse a RBS type and returns it
      #
      # If parsing failed, it returns a Tree(`:type_syntax_error), consuming
      #
      # 1. All of the input with `--` token if exists (for comments)
      # 2. All of the input (for anything else)
      #
      # ```
      # Integer -- Foo        # => Returns `Integer`, tokenizer has `--` as its current token
      # Integer[ -- Foo       # => Returns a tree for `Integer[`, tokenizer has `--` as its curren token
      # Integer[ Foo          # => Returns a tree for `Integer[ Foo`, tokenizer is at the end of the input
      # ```
      #
      # @rbs tokenizer: Tokenizer
      # @rbs parent_tree: AST::Tree
      # @rbs return: Types::t | AST::Tree | nil
      def parse_type: (Tokenizer tokenizer, AST::Tree parent_tree) -> (Types::t | AST::Tree | nil)

      # @rbs tokenizer: Tokenizer
      # @rbs return: AST::Tree
      def parse_rbs_annotation: (Tokenizer tokenizer) -> AST::Tree

      # @rbs tokznier: Tokenizer
      # @rbs return: AST::Tree
      def parse_inherits: (untyped tokenizer) -> AST::Tree
    end
  end
end
