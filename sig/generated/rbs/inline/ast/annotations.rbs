# Generated from lib/rbs/inline/ast/annotations.rb with RBS::Inline

module RBS
  module Inline
    module AST
      module Annotations
        type t = VarType | ReturnType | Use | Inherits | Generic | ModuleSelf | Skip | Assertion | Application | RBSAnnotation | Override | IvarType | Yields | Embedded | Method | SplatParamType

        class Base
          attr_reader source: CommentLines

          attr_reader tree: Tree

          # @rbs tree: Tree
          # @rbs source: CommentLines
          # @rbs return: void
          def initialize: (Tree tree, CommentLines source) -> void
        end

        class VarType < Base
          attr_reader name: Symbol

          attr_reader type: Types::t?

          attr_reader comment: String?

          # @rbs override
          def initialize: ...

          # :: () -> bool
          def complete?: () -> bool
        end

        class SplatParamType < Base
          attr_reader name: Symbol?

          attr_reader type: Types::t?

          attr_reader comment: String?

          attr_reader type_source: String

          # @rbs override
          def initialize: ...
        end

        # `@rbs return: T`
        class ReturnType < Base
          attr_reader type: Types::t?

          attr_reader comment: String?

          # @rbs override
          def initialize: ...

          # @rbs return: bool
          def complete?: () -> bool
        end

        # `@rbs @foo: T` or `@rbs self.@foo: T`
        class IvarType < Base
          attr_reader name: Symbol

          attr_reader type: Types::t?

          attr_reader class_instance: bool

          attr_reader comment: String?

          # @rbs override
          def initialize: ...
        end

        # `#:: TYPE`
        class Assertion < Base
          attr_reader type: Types::t | MethodType | nil

          def initialize: (untyped tree, untyped source) -> untyped

          # @rbs return: bool
          def complete?: () -> bool

          # Returns a type if it's type
          def type?: () -> Types::t?

          # Returns a method type if it's a method type
          def method_type?: () -> MethodType?
        end

        # `#[TYPE, ..., TYPE]`
        class Application < Base
          attr_reader types: Array[Types::t]?

          # @rbs override
          def initialize: ...

          # @rbs return: bool
          def complete?: () -> bool
        end

        # `# @rbs yields () -> void -- Comment`
        class Yields < Base
          # The type of block
          #
          # * Types::Block when syntactically correct input is given
          # * String when syntax error is reported
          # * `nil` when nothing is given
          attr_reader block_type: Types::Block | String | nil

          # The content of the comment or `nil`
          attr_reader comment: String?

          # If `[optional]` token is inserted just after `yields` token
          #
          # The Types::Block instance has correct `required` attribute based on the `[optional]` token.
          # This is for the other cases, syntax error or omitted.
          attr_reader optional: bool

          # @rbs override
          def initialize: ...
        end

        # `# @rbs %a{a} %a{a} ...`
        class RBSAnnotation < Base
          attr_reader contents: Array[String]

          # @rbs override
          def initialize: ...
        end

        # `# @rbs skip`
        class Skip < Base
          # @rbs override
          def initialize: ...
        end

        # `# @rbs inherits T`
        class Inherits < Base
          attr_reader super_name: TypeName?

          attr_reader args: Array[Types::t]?

          # @rbs override
          def initialize: ...
        end

        # `# @rbs override`
        #
        # Specify the method types as `...` (overriding super class method)
        class Override < Base
          # @rbs override
          def initialize: ...
        end

        # `# @rbs use [USES]`
        class Use < Base
          attr_reader clauses: Array[RBS::AST::Directives::Use::clause]

          # @rbs override
          def initialize: ...
        end

        # `# @rbs module-self [MODULE_SELF]`
        class ModuleSelf < Base
          attr_reader constraint: RBS::AST::Declarations::Module::Self?

          attr_reader comment: String?

          # @rbs override
          def initialize: ...
        end

        # `# @rbs generic [type param]`
        #
        # ```rb
        # # @rbs generic X
        # # @rbs generic in Y
        # # @rbs generic unchecked out Z < String -- Comment here
        # ```
        class Generic < Base
          # TypeParam object or `nil` if syntax error
          attr_reader type_param: RBS::AST::TypeParam?

          attr_reader comment: String?

          # @rbs override
          def initialize: ...
        end

        # `# @rbs!` annotation
        class Embedded < Base
          attr_reader content: String

          # @rbs override
          def initialize: ...
        end

        # `@rbs METHOD-TYPE``
        class Method < Base
          attr_reader type: MethodType?

          attr_reader method_type_source: String

          # @rbs override
          def initialize: ...
        end
      end
    end
  end
end
