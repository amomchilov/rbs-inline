# Generated from lib/rbs/inline/ast/declarations.rb with RBS::Inline

module RBS
  module Inline
    module AST
      module Declarations
        module ConstantUtil
          # @rbs node: Prism::Node
          # @rbs return: TypeName?
          def type_name: (Prism::Node node) -> TypeName?
        end

        type t = ClassDecl | ModuleDecl | ConstantDecl | SingletonClassDecl

        interface _WithComments
          def comments: () -> AnnotationParser::ParsingResult?
        end

        # @rbs module-self _WithComments
        module Generics : _WithComments
          # @rbs return: Array[RBS::AST::TypeParam]
          def type_params: () -> Array[RBS::AST::TypeParam]
        end

        class Base
        end

        # @rbs generic NODE < Prism::Node
        class ModuleOrClass[NODE < Prism::Node] < Base
          # The node that represents the declaration
          attr_reader node: NODE

          # Leading comment
          attr_reader comments: AnnotationParser::ParsingResult?

          # Members included in the declaration
          attr_reader members: Array[Members::t | t]

          # @rbs node: NODE
          # @rbs comments: AnnotationParser::ParsingResult?
          def initialize: (NODE node, AnnotationParser::ParsingResult? comments) -> void

          # Type parameters for the declaration
          def type_params: () -> Array[RBS::AST::TypeParam]

          def start_line: () -> Integer
        end

        class ClassDecl < ModuleOrClass[Prism::ClassNode]
          include ConstantUtil

          # Type application for super class
          attr_reader super_app: Annotations::Application?

          # @rbs node: Prism::ClassNode
          # @rbs comments: AnnotationParser::ParsingResult?
          # @rbs super_app: Annotations::Application?
          # @rbs return: void
          def initialize: (Prism::ClassNode node, AnnotationParser::ParsingResult? comments, Annotations::Application? super_app) -> void

          # @rbs %a{pure}
          %a{pure}
          def class_name: () -> TypeName?

          # @rbs %a{pure}
          %a{pure}
          def super_class: () -> RBS::AST::Declarations::Class::Super?
        end

        class ModuleDecl < ModuleOrClass[Prism::ModuleNode]
          include ConstantUtil

          # @rbs %a{pure}
          %a{pure}
          def module_name: () -> TypeName?

          # @rbs %a{pure}
          %a{pure}
          def module_selfs: () -> Array[Annotations::ModuleSelf]
        end

        class ConstantDecl < Base
          include ConstantUtil

          attr_reader node: Prism::ConstantWriteNode

          attr_reader comments: AnnotationParser::ParsingResult?

          attr_reader assertion: Annotations::TypeAssertion?

          # @rbs node: Prism::ConstantWriteNode
          # @rbs comments: AnnotationParser::ParsingResult?
          # @rbs assertion: Annotations::TypeAssertion?
          def initialize: (Prism::ConstantWriteNode node, AnnotationParser::ParsingResult? comments, Annotations::TypeAssertion? assertion) -> void

          # @rbs %a{pure}
          # @rbs return: Types::t
          %a{pure}
          def type: () -> Types::t

          # @rbs %a{pure}
          # @rbs return Types::t?
          %a{pure}
          def literal_type: () -> Types::t?

          # @rbs %a{pure}
          # @rbs return: TypeName?
          %a{pure}
          def constant_name: () -> TypeName?

          def start_line: () -> Integer
        end

        class SingletonClassDecl < ModuleOrClass[Prism::SingletonClassNode]
        end
      end
    end
  end
end
