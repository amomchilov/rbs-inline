# Generated from lib/rbs/inline/ast/members.rb with RBS::Inline

module RBS
  module Inline
    module AST
      module Members
        class Base
          attr_reader location: Prism::Location

          # @rbs location: Prism::Location
          def initialize: (Prism::Location location) -> void

          def start_line: () -> Integer
        end

        class RubyBase < Base
        end

        class RubyDef < RubyBase
          attr_reader node: Prism::DefNode

          attr_reader comments: AnnotationParser::ParsingResult?

          # The visibility directly attached to the `def` node
          #
          # `nil` when the `def` node is not passed to `private`/`public` calls.
          #
          # ```rb
          # def foo() end            # <= nil
          # private def foo() end    # <= :private
          # ```
          attr_reader visibility: RBS::AST::Members::visibility?

          attr_reader assertion: Annotations::Assertion?

          # @rbs node: Prism::DefNode
          # @rbs comments: AnnotationParser::ParsingResult?
          # @rbs visibility: RBS::AST::Members::visibility?
          # @rbs assertion: Annotations::Assertion?
          def initialize: (Prism::DefNode node, AnnotationParser::ParsingResult? comments, RBS::AST::Members::visibility? visibility, Annotations::Assertion? assertion) -> void

          # Returns the name of the method
          def method_name: () -> Symbol

          def method_type_annotations: () -> Array[Annotations::Assertion]

          # Returns the `kind` of the method definition
          #
          # [FIXME] It only supports `self` receiver.
          #
          # ```rb
          # def self.foo = ()    # :sigleton
          # def object.foo = ()  # Not supported (returns :instance)
          # ```
          def method_kind: () -> RBS::AST::Members::MethodDefinition::kind

          def return_type: () -> Types::t?

          def var_type_hash: () -> Hash[Symbol, Types::t?]

          def method_overloads: () -> Array[RBS::AST::Members::MethodDefinition::Overload]

          def method_annotations: () -> Array[RBS::AST::Annotation]

          def override_annotation: () -> AST::Annotations::Override?

          def yields_annotation: () -> AST::Annotations::Yields?
        end

        class RubyAlias < RubyBase
          attr_reader node: Prism::AliasMethodNode

          attr_reader comments: AnnotationParser::ParsingResult?

          # @rbs node: Prism::AliasMethodNode
          # @rbs comments: AnnotationParser::ParsingResult?
          def initialize: (Prism::AliasMethodNode node, AnnotationParser::ParsingResult? comments) -> untyped

          # @rbs returns Symbol -- the name of *old* method
          def old_name: () -> Symbol

          # @rbs returns Symbol -- the name of *new* method
          def new_name: () -> Symbol
        end

        class RubyMixin < RubyBase
          # CallNode that calls `include`, `prepend`, and `extend` method
          attr_reader node: Prism::CallNode

          # Comments attached to the call node
          attr_reader comments: AnnotationParser::ParsingResult?

          # Possible following type application annotation
          attr_reader application: Annotations::Application?

          # @rbs node: Prism::CallNode
          # @rbs comments: AnnotationParser::ParsingResult?
          # @rbs application: Annotations::Application?
          # @rbs returns void
          def initialize: (Prism::CallNode node, AnnotationParser::ParsingResult? comments, Annotations::Application? application) -> void

          # @rbs returns ::RBS::AST::Members::Include
          #            | ::RBS::AST::Members::Extend
          #            | ::RBS::AST::Members::Prepend
          #            | nil
          def rbs: () -> (::RBS::AST::Members::Include | ::RBS::AST::Members::Extend | ::RBS::AST::Members::Prepend | nil)
        end

        class RubyAttr < RubyBase
          attr_reader node: Prism::CallNode

          attr_reader comments: AnnotationParser::ParsingResult?

          attr_reader assertion: Annotations::Assertion?

          # @rbs node: Prism::CallNode
          # @rbs comments: AnnotationParser::ParsingResult?
          # @rbs assertion: Annotations::Assertion?
          # @rbs returns void
          def initialize: (Prism::CallNode node, AnnotationParser::ParsingResult? comments, Annotations::Assertion? assertion) -> void

          # @rbs return Array[RBS::AST::Members::AttrReader | RBS::AST::Members::AttrWriter | RBS::AST::Members::AttrAccessor]?
          def rbs: () -> untyped

          # Returns the type of the attribute
          #
          # Returns `untyped` when not annotated.
          def attribute_type: () -> Types::t
        end

        # `private` call without arguments
        class RubyPrivate < RubyBase
          attr_reader node: Prism::CallNode

          # @rbs node: Prism::CallNode
          def initialize: (Prism::CallNode node) -> void
        end

        # `public` call without arguments
        class RubyPublic < RubyBase
          attr_reader node: Prism::CallNode

          # @rbs node: Prism::CallNode
          def initialize: (Prism::CallNode node) -> void
        end

        class RBSBase < Base
        end

        class RBSIvar < RBSBase
          attr_reader annotation: Annotations::IvarType

          attr_reader comment: AnnotationParser::ParsingResult

          # @rbs comment: AnnotationParser::ParsingResult
          # @rbs annotation: Annotations::IvarType
          def initialize: (AnnotationParser::ParsingResult comment, Annotations::IvarType annotation) -> void

          def rbs: () -> (RBS::AST::Members::InstanceVariable | RBS::AST::Members::ClassInstanceVariable | nil)
        end
      end
    end
  end
end
