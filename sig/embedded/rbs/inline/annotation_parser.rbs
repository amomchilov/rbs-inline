module RBS
  module Inline
    class AnnotationParser
      class ParsingResult
        attr_reader comments: Array[Prism::Comment]

        attr_reader annotations: Array[AST::Annotations::t]

        attr_reader first_comment_offset: Integer

        # @rbs first_comment: Prism::Comment
        def initialize: (Prism::Comment first_comment) -> untyped

        # @rbs return: Range[Integer]
        def line_range: () -> Range[Integer]

        # @rbs return: Prism::Comment
        def last_comment: () -> Prism::Comment

        # @rbs comment: Prism::Comment
        # @rbs return: self?
        def add_comment: (Prism::Comment comment) -> self?

        # @rbs return: Array[[String, Prism::Comment]]
        def lines: () -> Array[[ String, Prism::Comment ]]

        # @rbs return: String
        def content: () -> String
      end

      attr_reader input: Array[Prism::Comment]

      # @rbs input: Array[Prism::Comment]
      def initialize: (Array[Prism::Comment] input) -> untyped

      # @rbs input: Array[Prism::Comment]
      # @rbs return: Array[ParsingResult]
      def self.parse: (Array[Prism::Comment] input) -> Array[ParsingResult]

      # @rbs return: Array[ParsingResult]
      def parse: () -> Array[ParsingResult]

      # @rbs result: ParsingResult
      # @rbs block: ^(Array[Prism::Comment]) -> void
      # @rbs return: void
      def each_annotation_paragraph: (ParsingResult result) { (Array[Prism::Comment]) -> void } -> void

      class Tokenizer
        attr_reader scanner: StringScanner

        attr_reader current_token: token?

        # @rbs scanner: StringScanner
        # @rbs return: void
        def initialize: (StringScanner scanner) -> void

        # @rbs tree: AST::Tree
        # @rbs return: token?
        def advance: (AST::Tree tree) -> token?

        # Test if current token has specified `type`
        #
        # @rbs type: Symbol
        # @rbs return: bool
        def type?: (Symbol type) -> bool

        # Reset the current_token to incoming comment `--`
        #
        # Reset to the end of the input if `--` token cannot be found.
        #
        # @rbs return: String -- String that is skipped
        def skip_to_comment: () -> String
      end

      def parse_annotation: (untyped comments) -> untyped

      def parse_var_decl: (untyped tokenizer) -> untyped

      def parse_return_type_decl: (untyped tokenizer) -> untyped

      def parse_comment: (untyped tokenizer) -> untyped

      def parse_type_app: (untyped tokenizer) -> untyped

      def parse_type_method_type: (untyped tokenizer, untyped parent_tree) -> untyped

      def parse_type: (untyped tokenizer, untyped parent_tree) -> untyped

      def parse_rbs_annotation: (untyped tokenizer) -> untyped

      def parse_inherits: (untyped tokenizer) -> untyped
    end
  end
end
